// $Id: $
// File name:   tb_controller.sv
// Created:     2/4/2015
// Author:      Clayton Brandt
// Lab Section: 337-05
// Version:     1.0  Initial Design Entry
// Description: Testbench for generating guesses.

`timescale 1ns / 10ps

module tb_controller
  ();
   //Define local parameters used by the test bench
   
   //parameters: clk and delay(?)
   localparam CLK_PER = 10;
   localparam DELAY = 1;
   
   //Create clk tb_clk type reg
   reg clock;

   //Local Paramenters
   localparam INPUT_BITS = 128;
   

   //Create variables type reg for needed ports
   
   reg 	   tb_n_rst;
   reg 	   tb_clear;
   reg 	   tb_start_bit;
   reg [0:8191] tb_allhashes;
   
   reg [0:3] 	tb_strlen;
   reg [0:6] 	tb_match;
   reg tb_read_enable;
   reg tb_write_enable;
   reg [0:9] tb_address;
   reg [0:127] tb_read_data;
   reg [0:127] tb_write_data;
   reg tb_mem_clr;
   reg tb_mem_dump;
   
   
   //DUT Port map
   controller DUT
   (
      .clk(clock), 
      .n_rst(tb_n_rst),
      .start_bit(tb_start_bit),
      .allthehashes(tb_allhashes), 
      .match(tb_match), 
      .strlen(tb_strlen),
    //  .read_enable(tb_read_enable),
		  .write_enable(tb_write_enable),
		  .address(tb_address),
		  .read_data(tb_read_data),
		  .write_data(tb_write_data)
    );
   
   on_chip_sram_wrapper RAM
	(
		// Test bench control signals
		.mem_clr(tb_mem_clr),
		//.mem_init(0),
		.mem_dump(tb_mem_dump),
		//.verbose(32'b00000000000000000000000000000000),
		.init_file_number(0),
		.dump_file_number(0),
		.start_address(0),
		.last_address(127),
		// Memory interface signals
		.read_enable(tb_read_enable),
		.write_enable(tb_write_enable),
		.address(tb_address),
		.read_data(tb_read_data),
		.write_data(tb_write_data)
	);
   
   //Clock Generation switch between 1 and 0 for #(CLK_PER/2.0);
   always
     begin
	clock = 1'b0;
	#(CLK_PER/2.0);
	clock = 1'b1;
	#(CLK_PER/2.0);
     end
   	

   
   //Initial begin
   initial
     begin
	
	//Set default values that are regs (ports given as inputs) set to whatevs
	tb_n_rst = 0;
	tb_mem_clr = 0;
	tb_mem_dump = 0;
	tb_read_enable = 0;
	#1;
	tb_n_rst = 1;
	tb_mem_clr = 1;
	#1;
	tb_mem_clr = 0;
	tb_start_bit = 1;
	tb_allhashes[0:255] = 256'h79312F7EE81E59D4E76A15021E74B5972392D2E86E402A72E462446D024AE8F7;//256'h93CC2B4D5D1FCCC38FAB249A9AEDB1E36237795E56D95C5BC0B6F7405B31EDF9;//the strings 'ab' and 'ba'//512'h93CC2B4D5D1FCCC38FAB249A9AEDB1E36237795E56D95C5BC0B6F7405B31EDF92FC8BEA1E2325C1AE5431551193825D95BFA03F997D0153156F3B083AF89D5D5;
  tb_allhashes[256:8191] = 0;
  #1;
  #(CLK_PER * 1500);
  tb_read_enable = 1;
  #CLK_PER;
  tb_mem_dump = 1;
  
  #CLK_PER;
  tb_mem_dump = 0;
  tb_read_enable = 0;
  
	//Test toggle for reset

	
     end // initial begin
   
endmodule